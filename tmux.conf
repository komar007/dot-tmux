# Dependencies
# ============

# The binary dependencies prefix.
#
# Programs required by this config (like fzf, bat, etc.) are spawned with this prefix.
# Setting to a directory (ending in "/") allows to override all binary dependencies.
%hidden DEP_PREFIX=""

# The scripts directory
#
# Scripts that are part of this config are expected to be found in this directory.
# Trailing "/" is not required.
%hidden BIN="~/.tmux/bin"

# Common dep-prefixed programs
%hidden FZF="${DEP_PREFIX}fzf"
%hidden TPUT="${DEP_PREFIX}tput"
%hidden XSEL="${DEP_PREFIX}xsel"

# Scripts
%hidden SPAWN_SHELL="$BIN/spawn_shell.sh"
%hidden GET_SESSION_DIR="$BIN/get_session_dir.sh"


# External key binds
# ==================

%hidden kC_minus="\uE100"
%hidden kC_m="\uE101"
%hidden kC_M="\uE102"
%hidden kC_J="\uE103"
%hidden kC_K="\uE104"
%hidden kC_backspace="\uE108"

# Basic settings
# ==============

set -s buffer-limit 16384
set -s escape-time 0
# Alacritty terminal features: 24-bit color & underline style passthrough
set -sa terminal-features "alacritty:RGB:usstyle"

set -s focus-events on

set -g mouse on
set -g base-index 1
set -g renumber-windows on
set -g word-separators ' '
set -g history-limit 32000
set -g status-position top
set -g status-interval 10
set -g display-time 5000
set -g set-titles on
set -g set-titles-string '[tmux] #{pane_title}'
set -g detach-on-destroy off

set -wg mode-keys vi


# Key bindings
# ============

# Rationale behind the C-s prefix:
# - the default C-b is backwards one character in emacs, and I use that in readline, so it's
#   unacceptable,
# - I've tried C-w, because w stands for "window", and that also nicely integrates with vim's
#   window management, but C-w is "erase word", and I found it hard to live without it (tried
#   C-w C-w / C-w w for a while and couldn't get used to it),
# - screen's default C-a is unacceptable, because it is "go to beginning of line" in
#   readline/emacs,
# - in the end I settled on C-s, which is easy enough to press with the left hand on qwerty,
#   and it only overrides no scroll, which I use extremely rarely; an added benefit is that barely
#   any terminal app will use it for anything useful, because if its original unix meaning.
set -g prefix C-s
# prefix C-s is bound to C-s as a fallback to be able to freeze the terminal when absolutely
# necessary
bind C-s send-keys C-s

# reloading config
bind R source ~/.tmux.conf

# move the status bar up and down
bind -n F10 set-window-option status-position

# copy-mode with vim-like behavior
# --------------------------------

bind [ copy-mode
unbind -T copy-mode-vi C-j
# some emacs/readline-like motions
bind -T copy-mode-vi C-a send-keys -X start-of-line
bind -T copy-mode-vi C-e send-keys -X end-of-line
bind -T copy-mode-vi C-b send-keys -X cursor-left
bind -T copy-mode-vi C-f send-keys -X cursor-right
# rectangle selection
bind -T copy-mode-vi C-v \
    send-keys -X begin-selection \; \
    send-keys -X rectangle-toggle
# regular selection
bind -T copy-mode-vi v send-keys -X begin-selection
# copy selection to tmux buffer and X selection
bind -T copy-mode-vi y \
    send-keys -X pipe-no-clear "$XSEL -i --primary" \; \
    send-keys -X pipe "tmux load-buffer -" \; \
    send-keys -X cancel
# paste selection to terminal and quit copy mode
bind -T copy-mode-vi p \
    send-keys -X pipe "tmux load-buffer -b temp -" \; \
    send-keys -X cancel \; \
    run "sleep 0.1" \; \
    paste-buffer -drb temp
# copy mouse selection to tmux buffer and X selection
bind -T copy-mode-vi MouseDragEnd1Pane \
    send-keys -X pipe-no-clear "$XSEL -i --primary" \; \
    send-keys -X pipe "tmux load-buffer -"
# copy word to tmux buffer and X selection
bind -n DoubleClick1Pane \
    copy-mode -M \; \
    send-keys -X select-word \; \
    run "sleep 0.15" \; \
    send-keys -X pipe-no-clear "$XSEL -i --primary" \; \
    send-keys -X pipe "tmux load-buffer -" \; \
    send-keys -X cancel
bind -n MouseDown2Pane run-shell -b " tmux send-keys -l -- \"\$($XSEL -o --primary)\""
bind -T copy-mode-vi r send-keys -X rectangle-toggle
bind -T copy-mode-vi Escape send-keys -X cancel
# search forward (or down, that is: n goes to next result (down), N goes up), but start from the last result
%hidden SEARCH_FORWARD_FROM_BOTTOM="send -X search-forward-incremental \"%%%\"; send N"
bind -T copy-mode-vi / command-prompt -i -p "search down" "$SEARCH_FORWARD_FROM_BOTTOM"
bind -T copy-mode-vi ? command-prompt -i -p "search up" "send -X search-backward-incremental \"%%%\""

bind -n M-s 'copy-mode ; command-prompt -T search -i -p "search down" "$SEARCH_FORWARD_FROM_BOTTOM"'

# session management
# ------------------

# sessions are not maintained in any defined order, so there's no point going back and forth...
unbind (
unbind )

bind r command-prompt -T command -I "#S" -p "rename #S to:" "rename-session \"%%%\""

# ...jumping to last used session, however, makes perfect sense
bind - switch-client -l # last-used session
bind $kC_minus switch-client -l # ...also, because Shift may remain pressed

%hidden FZF_TMUX_COMMON_STYLE="\
    --border=none \
    --color bg:#171717,preview-bg:#000000 \
"

# fzf session selector
# TODO: try to sort by last attached from CURRENT client
%hidden SESSION_LIST="\
tmux list-sessions -F \"##{session_activity} ##{session_name} ##{session_windows} win\" \
     | sort -rn"
%hidden TMUX_SESSION_LIST="\
$FZF --tmux 100%,100% \
    $FZF_TMUX_COMMON_STYLE \
    --with-nth=2.. \
    --padding=0% \
    --margin=0% \
    --preview-window=down,80%,nowrap,border-none\
    --preview 'tmux capture-pane -pet {2}: | tail -n \$($TPUT lines)' \
"
bind _ run-shell -b "\
    result=\$($SESSION_LIST | $TMUX_SESSION_LIST --print-query); \
    if [ -z \"\$result\" ]; then \
        exit; \
    elif [ \$(printf \"%s\n\" \"\$result\" | wc -l) -eq 1 ]; then \
        session=\"\$result\"; \
    else \
        session=\"\$(printf \"%s\n\" \"\$result\" | tail -n 1 | cut -d' ' -f 2)\"; \
    fi; \
    dir=\$($GET_SESSION_DIR \"\$session\"); \
    tmux new-session -d -s \"\$session\" -c \"\$dir\" \"$SPAWN_SHELL \$session\"; \
    tmux switch-client -t \"\$session\"; \
"

# regular session selector
bind w choose-tree -wsZ

# change session working directory, very much WiP - the prompt supports no completion:(
bind a command-prompt -T command -p "cd" -I "#{session_path}" "attach-session -t . -c \"%%%\""

# moving between windows
# ----------------------

# new window
%hidden SPAWN_CUSTOM_SHELL="\
    session=\$(tmux display-message -pF \"#S\"); \
    \"$SPAWN_SHELL\" \"\$session\"
"
bind c new-window -a -c "#{pane_current_path}" "$SPAWN_CUSTOM_SHELL" # "clone window": open to the right, with current pane's cwd
bind C new-window "$SPAWN_CUSTOM_SHELL" # classical new window: open as the last one, with session's cwd

# keeping SELECT_LEFT_PANE (simpler version) if it's ever useful...
#%hidden SELECT_LEFT_PANE="tmux select-pane -t '{top-left}"

%hidden GET_IMPORTANT_WINDOWS_LEFT="tmux list-windows -F '##I' -f '##{&&:##{==:!,##{=1:window_name}},##{<:##{window_index},##{active_window_index}}}'"
%hidden GET_IMPORTANT_WINDOWS_RIGHT="tmux list-windows -F '##I' -f '##{&&:##{==:!,##{=1:window_name}},##{>:##{window_index},##{active_window_index}}}'"

# select first window/left pane
bind -n $kC_m run-shell "tmux select-window -t:\$( (echo ^ && $GET_IMPORTANT_WINDOWS_LEFT) | tail -n 1 )"
bind -n $kC_M run-shell "tmux select-window -t:\$( ($GET_IMPORTANT_WINDOWS_RIGHT && echo \$) | head -n 1 )"
# select last-used window
bind -n $kC_minus last-window

# window ++, --
bind -n C-k previous-window
bind -n C-j next-window

bind -n M-1 select-window -t:1
bind -n M-2 select-window -t:2
bind -n M-3 select-window -t:3
bind -n M-4 select-window -t:4
bind -n M-5 select-window -t:5
bind -n M-6 select-window -t:6
bind -n M-7 select-window -t:7
bind -n M-8 select-window -t:8
bind -n M-9 select-window -t:9

# moving windows
bind -n C-Up   swap-window -t -1 -d # fallback
bind -n $kC_K swap-window -t -1 -d
bind -n C-Down swap-window -t +1 -d # fallback
bind -n $kC_J swap-window -t +1 -d

# splits - more like in vim, but with prefix, instead C-w
unbind \"
unbind \%
bind s split-window -c "#{pane_current_path}" "$SPAWN_CUSTOM_SHELL"
bind v split-window -h -c "#{pane_current_path}" "$SPAWN_CUSTOM_SHELL"

# moving panes around
bind m select-pane -m
bind M swap-pane

%hidden SWAP_WITH_LAST_PANE="select-pane -m \\; select-pane -l \\; swap-pane \\; select-pane -M"
bind J run-shell "tmux select-pane -D \\; $SWAP_WITH_LAST_PANE"
bind K run-shell "tmux select-pane -U \\; $SWAP_WITH_LAST_PANE"
bind H run-shell "tmux select-pane -L \\; $SWAP_WITH_LAST_PANE"
bind L run-shell "tmux select-pane -R \\; $SWAP_WITH_LAST_PANE"

# fix pgup/pgdn to be like in most terminals
bind -n S-Pageup copy-mode -u
bind -n S-Pagedown send-keys Pagedown

# Scrollback buffer scrapers
# --------------------------

%hidden TMP_CAPTURE=/tmp/tmux_capture
%hidden TMP_CAPTURE_BARE=/tmp/tmux_capture.bare
%hidden BAT_HIGHLIGHT="${DEP_PREFIX}bat --theme gruvbox-dark --color=always --decorations never"
%hidden FZF_SCRAPER_SELECT="\
$FZF --tmux 100%,100% \
    $FZF_TMUX_COMMON_STYLE \
    --with-nth=2.. \
    --no-sort \
    --padding=0% \
    --margin=0% \
    --preview \" \
        grep -Fn -- \"{2..}\" $TMP_CAPTURE_BARE \
        | cut -d: -f1 \
        | sed 's/^/-H /' \
        | xargs $BAT_HIGHLIGHT $TMP_CAPTURE \
    \" \
    --preview-window=up,80%,nowrap,border-none,+{1}+1/1 \
    --bind \"ctrl-y:execute(tmux set-buffer {2..} && echo {2..} | $XSEL -i --primary)+abort\" \
    | cut -d' ' -f 2- \
"
%hidden UNIQ_STABLE="awk '!seen[\$0]++'"
%hidden REVERSE_UNIQ="tac | $UNIQ_STABLE"

%hidden GREP_N_BEGIN="grep --color=none -onE"
%hidden GREP_N_END="| sed 's/:/ /'"
# Scraping qualifiers
%hidden FIND_URLS="$GREP_N_BEGIN 'https?:\/\/[^][ ^<>]+' $GREP_N_END | $REVERSE_UNIQ"
%hidden FIND_WORDS="$GREP_N_BEGIN '[^][ \t]+' $GREP_N_END | $REVERSE_UNIQ"
%hidden FIND_BIG_WORDS="$GREP_N_BEGIN '[^ \t]+' $GREP_N_END | $REVERSE_UNIQ"

# Enter-actions
%hidden OPEN_URL="\
    xargs xdg-open \
    > /dev/null 2>&1 \
    || true \
"
%hidden PASTE_RESULT="\
    xargs tmux send-keys -l -- \
    || true \
"

# FIXME: FINDERS or CAPTURERS don't work inside reload() :(
%hidden ADD_BINDS_FOR_REGEX_SELECTOR="\
    --bind \\\"f1:reload:cat $TMP_CAPTURE_BARE | $FIND_URLS\\\" \
    --bind \\\"f2:reload:cat $TMP_CAPTURE_BARE | $FIND_WORDS\\\" \
    --bind \\\"f3:reload:cat $TMP_CAPTURE_BARE | $FIND_BIG_WORDS\\\" \
"

%hidden CAPTURE_PANE="tmux capture-pane -eJp > $TMP_CAPTURE && tmux capture-pane -Jp | tee $TMP_CAPTURE_BARE"
%hidden CAPTURE_SCROLLBACK="tmux capture-pane -eJp -S- -E- > $TMP_CAPTURE && tmux capture-pane -Jp -S- -E- | tee $TMP_CAPTURE_BARE"

# URL Scraper

# visible part of pane
bind u run-shell -b "$CAPTURE_PANE | $FIND_URLS | $FZF_SCRAPER_SELECT | $OPEN_URL"
# whole history of pane
bind U run-shell -b "$CAPTURE_SCROLLBACK | $FIND_URLS | $FZF_SCRAPER_SELECT | $OPEN_URL"

# Generic Scraper

# visible part of pane
bind y run-shell -b "$CAPTURE_PANE | $FIND_WORDS | FZF_DEFAULT_OPTS=\"\$FZF_DEFAULT_OPTS $ADD_BINDS_FOR_REGEX_SELECTOR\" $FZF_SCRAPER_SELECT | $PASTE_RESULT"
# whole history of pane
bind Y run-shell -b "$CAPTURE_SCROLLBACK | $FIND_WORDS | FZF_DEFAULT_OPTS=\"\$FZF_DEFAULT_OPTS $ADD_BINDS_FOR_REGEX_SELECTOR\" $FZF_SCRAPER_SELECT | $PASTE_RESULT"

# paste buffers
# -------------

# TODO: get fields from tmux and then format outside of tmux
%hidden LIST_BUFFERS="\
tmux list-buffers -F '%SRC% ##{buffer_name}%RESET% ##{buffer_sample} %DIM%(##{buffer_size} ##{?##{==:##{buffer_size},1},byte,bytes})%RESET%' \
    | sed -e \"s/%DIM%/\$($TPUT setaf 0)/g\" \
          -e \"s/%SRC%/\$($TPUT setaf 4)/g\" \
          -e \"s/%RESET%/\$($TPUT sgr0)/g\" \
"
%hidden FORMAT_X_SEL="sed \"1s/^/\$($TPUT setaf 1) selection\$($TPUT sgr0) /\""
%hidden FORMAT_X_CLIP="sed \"1s/^/\$($TPUT setaf 1) clipboard\$($TPUT sgr0) /\""

bind p run-shell -b "tmux send-keys -l -- \"\$($XSEL -o --primary)\""
bind P run-shell -b "\
    sel=\$( \
        ( \
            $XSEL -o --primary | $FORMAT_X_SEL; \
            printf '\\0'; \
            $LIST_BUFFERS | head -n 1 | tr -d '\n'; \
            printf '\\0'; \
            $XSEL -o --clipboard | $FORMAT_X_CLIP; \
            printf '\\0'; \
            $LIST_BUFFERS | tail -n +2 | tr '\n' '\\0' \
        ) \
        | sed -ur \
            -e 's/(\\x0)+/\\1/g' \
            -e '1s/^\\x0//' \
        | $FZF --tmux bottom,50% \
            $FZF_TMUX_COMMON_STYLE \
            --ansi \
            --read0 \
        | head -n 1 \
        | cut -d' ' -f 2 \
    ); \
    case \"\$sel\" in \
        '') ;; \
        selection) tmux send-keys -l -- \"\$($XSEL -o --primary)\" ;; \
        clipboard) tmux send-keys -l -- \"\$($XSEL -o --clipboard)\" ;; \
        *) tmux paste-buffer -b \$sel ;; \
    esac || true \
"

# FIXME: test should be against popup open, not session_name, because changing the session in popup allows for popup inception
%hidden SCRATCH_SESSION_NAME=scratch
bind-key S run-shell "\
    if test 1 -eq #{==:#{session_name},$SCRATCH_SESSION_NAME} ; then \
        tmux detach-client; \
    else \
        old_style=\$(tmux show-options -gw -v popup-border-style); \
        old_lines=\$(tmux show-options -gw -v popup-border-lines); \
        tmux set -gw popup-border-style fg=green; \
        tmux set -gw popup-border-lines none; \
        (tmux popup -xC -yP -w100% -h50% -E \"tmux new-session -A -s $SCRATCH_SESSION_NAME\" &); \
        sleep 0.1 && tmux set -gw popup-border-style \"\$old_style\" && tmux set -gw popup-border-lines \"\$old_lines\"; \
    fi\
"

# Look and feel
# =============

set -g status "on"

set -g status-style bg=colour16,fg=white
set -wg window-status-style ""
set -wg window-status-activity-style ""
set -wg window-status-current-style ""
set -wg window-status-bell-style ""
set -wg pane-active-border-style fg=colour250
set -wg pane-border-style fg=colour237
set -wg clock-mode-colour colour109 #blue
set -g message-style "fg=blue,bg=#151515"
set -g message-command-style bg=colour239,fg=colour223
set -g display-panes-active-colour colour250
set -g display-panes-colour colour237

set -g status-style "bg=#151515"
set -g status-justify "left"
set -g status-left-style none
set -g status-left-length 80
set -g status-right-style none
set -g status-right-length 1200
set -wg window-status-separator ""


set -g menu-style "bg=#000000"
set -g menu-selected-style "bg=#333388,fg=#ffffff"
set -g menu-border-style "bg=#000000,fg=blue"
set -g menu-border-lines rounded

set -wg popup-border-style "fg=#aaaaaa"

%hidden SESSION_IS_FOCUSED="#{m:*focused*,#{client_flags}}"
%hidden GRADIENT_LEFT_ACTIVE="#[fg=#6688aa#,bg=#556699]▌#[fg=#445588#,bg=#334466]▌#[bg=#223355#,fg=white]"
%hidden GRADIENT_LEFT_INACTIVE="#[fg=#666666#,bg=#555555]▌#[fg=#444444#,bg=#333333]▌#[bg=#222222#,fg=white]"
set -g status-left "#{?$SESSION_IS_FOCUSED,#[bg=blue#,fg=colour16]  $GRADIENT_LEFT_ACTIVE,#[bg=#777777#,fg=colour16]  $GRADIENT_LEFT_INACTIVE} #S #[bg=colour16]"
%hidden SR_TITLE="#[fg=colour240,align=left]▏#{=/77/...:pane_title}"
%hidden GRADIENT_RIGHT_ACTIVE="#[fg=#222222#,bg=#333366]▌#[fg=#334466#,bg=#445577]▌#[bg=#556688#,fg=#000000]"
%hidden GRADIENT_RIGHT_INACTIVE="#[fg=#222222#,bg=#333333]▌#[fg=#444444#,bg=#555555]▌#[bg=#666666#,fg=#000000]"
%hidden SR_TIME="%a %d %b #[fg=#aaaaaa,bold]%H:%M#[fg=#000000]"
%hidden SR_SSH_LABEL="#{?#{!=:#(tmux show-environment SSH_CONNECTION | cut -sd= -f 2-),},#[bold#,fg=colour3]ssh:#[nobold#],}"
%hidden CPU_LOAD="#(\
    ${DEP_PREFIX}pidtree_mon --version > /dev/null && ${DEP_PREFIX}pidtree_mon \
        -t 100 \
        -s '' \
        -f 'sum_t:if_range:..0.050:#[fg=#000000] ' \
        -f 'sum_t:if_range:0.050..0.125:#[fg=#4A90E2]▁' \
        -f 'sum_t:if_range:0.125..0.250:#[fg=#A8D8B9]▂' \
        -f 'sum_t:if_range:0.250..0.375:#[fg=#F6EB61]▃' \
        -f 'sum_t:if_range:0.375..0.500:#[fg=#F9A45D]▄' \
        -f 'sum_t:if_range:0.500..0.625:#[fg=#F57F20]▅' \
        -f 'sum_t:if_range:0.625..0.750:#[fg=#D65729]▆' \
        -f 'sum_t:if_range:0.750..0.875:#[fg=#E74C3C]▇' \
        -f 'sum_t:if_range:0.875..:#[fg=#C0392B]█' \
        1 \
)"

%hidden BAT=BAT1
%hidden BATTERY_STATUS="#(\
    BATCAP=/sys/class/power_supply/$BAT/capacity ; \
    BATSTAT=/sys/class/power_supply/$BAT/status ; \
    if [ -s \$BATCAP ] && [ -s \$BATSTAT ]; then \
        B=\$(cat /sys/class/power_supply/BAT1/capacity); \
        I=\$((B/10+1)); \
        I=\$((I>10?10:I)); \
        if [ \"\$(cat \$BATSTAT)\" = Discharging ]; then \
            set -- 󰁺 󰁻 󰁼 󰁽 󰁾 󰁿 󰂀 󰂁 󰂂 󰁹 ; \
            ICON=\${!I} ; \
            set -- 'C0392B' 'E74C3C' 'D65729' 'F57F20' 'F9A45D' 'F6EB61' 'A8D8B9' '4A90E2' '6AA0F2' '7AC0F2' ; \
            COLOR=\"#[fg=#\${!I}]\" ; \
        else \
            set -- 󰢜 󰂆 󰂇 󰂈 󰢝 󰂉 󰢞 󰂊 󰂋 󰂅 ; \
            ICON=\${!I} ; \
            COLOR=\"#[fg=#20B030]\" ; \
        fi ; \
        echo \"\${COLOR}\$B \${ICON} \"; \
    fi \
)"

%hidden HOST_ICONIZED="#{s/ubuntu/󰕈 /:#{s/nixos-/ /:host}}"
set -g status-right "$SR_TITLE#[align=right]#{?$SESSION_IS_FOCUSED,$GRADIENT_RIGHT_ACTIVE,$GRADIENT_RIGHT_INACTIVE} $SR_TIME $CPU_LOAD #[fg=#000000]$SR_SSH_LABEL#[fg=#000000]$HOST_ICONIZED #[nobold]$BATTERY_STATUS"

source-file -F "~/.tmux/conf.d/window-status-#{?@CURRENT_STATUS_TYPE,#{@CURRENT_STATUS_TYPE},ribbons}.conf"
bind -n F9 source-file -F "~/.tmux/conf.d/window-status-#{@NEXT_STATUS_TYPE}.conf"

# add or remove "!" at the beginning of window_name to mark it important
bind Space rename-window "#{?#{==:!,#{=1:window_name}},#{s/^.//:window_name},!#{window_name}}"

set -wg pane-active-border-style bg=default,fg=blue
set -wg pane-border-style fg=colour237

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# Except true vim binds
# ======================================================

%hidden is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?\$' \
    && [ #{pane_in_mode} = 0 ]"
bind h   if-shell "$is_vim" { send-keys \uE120 h } { if-shell -F '#{e|-:#{pane_at_left},#{window_zoomed_flag}}'   {} { select-pane -Z -L } }
bind C-h if-shell "$is_vim" { send-keys \uE120 h } { if-shell -F '#{e|-:#{pane_at_left},#{window_zoomed_flag}}'   {} { select-pane -Z -L } }
bind j   if-shell "$is_vim" { send-keys \uE120 j } { if-shell -F '#{e|-:#{pane_at_bottom},#{window_zoomed_flag}}' {} { select-pane -Z -D } }
bind C-j if-shell "$is_vim" { send-keys \uE120 j } { if-shell -F '#{e|-:#{pane_at_bottom},#{window_zoomed_flag}}' {} { select-pane -Z -D } }
bind k   if-shell "$is_vim" { send-keys \uE120 k } { if-shell -F '#{e|-:#{pane_at_top},#{window_zoomed_flag}}'    {} { select-pane -Z -U } }
bind C-k if-shell "$is_vim" { send-keys \uE120 k } { if-shell -F '#{e|-:#{pane_at_top},#{window_zoomed_flag}}'    {} { select-pane -Z -U } }
bind l   if-shell "$is_vim" { send-keys \uE120 l } { if-shell -F '#{e|-:#{pane_at_right},#{window_zoomed_flag}}'  {} { select-pane -Z -R } }
bind C-l if-shell "$is_vim" { send-keys \uE120 l } { if-shell -F '#{e|-:#{pane_at_right},#{window_zoomed_flag}}'  {} { select-pane -Z -R } }
bind -n $kC_backspace if-shell "$is_vim" { send-keys \uE120 BSpace } { last-pane -Z }
